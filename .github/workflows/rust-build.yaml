name: Rust Build and Test
on:
  workflow_call:
    outputs:
      pluginName:
        description: Project name detected from Cargo.toml
        value: ${{ jobs.check-event.outputs.pluginName }}
jobs:
  check-event:
    name: Check GitHub Event Data 🔎
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    outputs:
      package: ${{ steps.setup.outputs.package }}
      config: ${{ steps.setup.outputs.config }}
      commitHash: ${{ steps.setup.outputs.commitHash }}
      pluginName: ${{ steps.setup.outputs.pluginName }}
      pluginVersion: ${{ steps.setup.outputs.pluginVersion }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up working directory
        run: |
          cd $GITHUB_WORKSPACE
          pwd
          ls -la
          
      - name: Check Event Data ☑️
        id: setup
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          : Check Event Data ☑️
          if [[ "${RUNNER_DEBUG}" ]]; then set -x; fi

          case "${GITHUB_EVENT_NAME}" in
            pull_request)
              config_data=('package:false' 'config:debug')
              if gh pr view ${{ github.event.number }} --json labels \
                | jq -e -r '.labels[] | select(.name == "Seeking Testers")' > /dev/null; then
                config_data[0]='package:true'
              fi
              ;;
            push)
              config_data=('package:true' 'config:release')
              ;;
            workflow_dispatch)
              config_data=('package:false' 'config:debug')
              ;;
            schedule)
              config_data=('package:true' 'config:release')
              ;;
            *) ;;
          esac

          for config in "${config_data[@]}"; do
            IFS=':' read -r key value <<< "${config}"
            echo "${key}=${value}" >> $GITHUB_OUTPUT
          done
          echo "commitHash=${GITHUB_SHA:0:9}" >> $GITHUB_OUTPUT

          # Extract name and version from Cargo.toml
          plugin_name=$(grep -m 1 'name =' Cargo.toml | cut -d '"' -f 2)
          plugin_version=$(grep -m 1 'version =' Cargo.toml | cut -d '"' -f 2)
          
          echo "pluginName=${plugin_name}" >> $GITHUB_OUTPUT
          echo "pluginVersion=${plugin_version}" >> $GITHUB_OUTPUT

  rust-build:
    name: Build for ${{ matrix.os }} 🦀
    needs: check-event
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Build
        run: |
          if [[ "${{ needs.check-event.outputs.config }}" == "release" ]]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --target ${{ matrix.target }}
          fi
          
      - name: Run Tests
        run: |
          if [[ "${{ needs.check-event.outputs.config }}" == "release" ]]; then
            cargo test --release --target ${{ matrix.target }}
          else
            cargo test --target ${{ matrix.target }}
          fi
          
      - name: Package
        if: ${{ fromJSON(needs.check-event.outputs.package) }}
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
            tar -czvf dist/${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}.tar.gz \
              -C target/${{ matrix.target }}/${{ needs.check-event.outputs.config }} lib${{ needs.check-event.outputs.pluginName }}.so
          elif [[ "${{ matrix.target }}" == *"-apple-"* ]]; then
            tar -czvf dist/${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}.tar.gz \
              -C target/${{ matrix.target }}/${{ needs.check-event.outputs.config }} lib${{ needs.check-event.outputs.pluginName }}.dylib
          fi
          
      - name: Upload Artifacts 📡
        uses: actions/upload-artifact@v4
        if: ${{ fromJSON(needs.check-event.outputs.package) }}
        with:
          name: ${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}-${{ needs.check-event.outputs.commitHash }}
          path: dist/${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}.tar.gz 