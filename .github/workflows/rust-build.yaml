name: Rust Build and Test
on:
  workflow_call:
    outputs:
      pluginName:
        description: Project name detected from Cargo.toml
        value: ${{ jobs.check-event.outputs.pluginName }}
jobs:
  check-event:
    name: Check GitHub Event Data 🔎
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    outputs:
      package: ${{ steps.setup.outputs.package }}
      config: ${{ steps.setup.outputs.config }}
      commitHash: ${{ steps.setup.outputs.commitHash }}
      pluginName: ${{ steps.setup.outputs.pluginName }}
      pluginVersion: ${{ steps.setup.outputs.pluginVersion }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Debug Directory Structure
        run: |
          echo "Current directory: $(pwd)"
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Repository contents:"
          ls -la
          echo "Parent directory contents:"
          ls -la ..
          echo "Root directory contents:"
          ls -la /
          echo "Home directory contents:"
          ls -la ~
          
      - name: Check Event Data ☑️
        id: setup
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          : Check Event Data ☑️
          if [[ "${RUNNER_DEBUG}" ]]; then set -x; fi

          # Ensure we're in the correct directory
          cd $GITHUB_WORKSPACE
          echo "Current directory after cd: $(pwd)"
          echo "Current directory contents:"
          ls -la
          echo "Cargo.toml contents:"
          cat Cargo.toml || echo "Cargo.toml not found"

          case "${GITHUB_EVENT_NAME}" in
            pull_request)
              config_data=('package:false' 'config:debug')
              if gh pr view ${{ github.event.number }} --json labels \
                | jq -e -r '.labels[] | select(.name == "Seeking Testers")' > /dev/null; then
                config_data[0]='package:true'
              fi
              ;;
            push)
              config_data=('package:true' 'config:release')
              ;;
            workflow_dispatch)
              config_data=('package:false' 'config:debug')
              ;;
            schedule)
              config_data=('package:true' 'config:release')
              ;;
            *) ;;
          esac

          for config in "${config_data[@]}"; do
            IFS=':' read -r key value <<< "${config}"
            echo "${key}=${value}" >> $GITHUB_OUTPUT
          done
          echo "commitHash=${GITHUB_SHA:0:9}" >> $GITHUB_OUTPUT

          # Extract name and version from Cargo.toml
          plugin_name=$(grep -m 1 'name =' Cargo.toml | cut -d '"' -f 2)
          plugin_version=$(grep -m 1 'version =' Cargo.toml | cut -d '"' -f 2)
          
          echo "pluginName=${plugin_name}" >> $GITHUB_OUTPUT
          echo "pluginVersion=${plugin_version}" >> $GITHUB_OUTPUT

  rust-build:
    name: Build for ${{ matrix.os }} 🦀
    needs: check-event
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install OBS Studio Development Libraries 📚
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        run: |
          # Add OBS Studio PPA
          sudo add-apt-repository -y ppa:obsproject/obs-studio
          sudo apt-get update
          
          # List available OBS packages and versions
          echo "Available OBS packages and versions:"
          apt-cache policy obs-studio libobs-dev
          
          # Install development libraries first
          sudo apt-get install -y libobs-dev
          
          # Then install OBS Studio
          sudo apt-get install -y obs-studio
          
          # Verify installation
          echo "Checking installed OBS packages:"
          dpkg -l | grep obs
          
          # Find and verify libobs.pc location
          echo "Searching for libobs.pc..."
          find /usr -name "libobs.pc" -type f
          
          # List contents of pkgconfig directories
          echo "Contents of pkgconfig directories:"
          ls -la /usr/lib/x86_64-linux-gnu/pkgconfig/
          ls -la /usr/lib/pkgconfig/
          
          # Set PKG_CONFIG_PATH
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
          
          # Find and set LIBOBS_PATH
          OBS_LIB_PATH=$(find /usr -name "libobs.so*" -type f | head -n 1)
          if [ -n "$OBS_LIB_PATH" ]; then
            echo "Found OBS library at: $OBS_LIB_PATH"
            echo "LIBOBS_PATH=$(dirname "$OBS_LIB_PATH")" >> $GITHUB_ENV
          else
            echo "Error: Could not find OBS library"
            exit 1
          fi
          
          # Print environment variables
          echo "Environment variables:"
          env | grep -E "PKG_CONFIG|LIBOBS"
          
          # Verify pkg-config can find libobs
          echo "Testing pkg-config:"
          pkg-config --libs --cflags libobs
          
      - name: Install OBS Studio Development Libraries 📚
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          # Install build dependencies
          brew install cmake qt@6 swig ffmpeg
          
          # Add Qt to PATH
          echo "/opt/homebrew/opt/qt@6/bin" >> $GITHUB_PATH
          export LDFLAGS="-L/opt/homebrew/opt/qt@6/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/qt@6/include"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/qt@6/lib/pkgconfig"
          
          # Download and extract OBS dependencies
          echo "Downloading OBS dependencies..."
          curl -L -o obs-deps.tar.gz https://github.com/obsproject/obs-deps/releases/download/2023-11-01/obs-deps-macos-arm64.tar.xz
          if [ ! -f obs-deps.tar.gz ]; then
            echo "Error: Failed to download OBS dependencies"
            exit 1
          fi
          
          echo "File info:"
          file obs-deps.tar.gz
          echo "File size:"
          ls -lh obs-deps.tar.gz
          
          echo "Extracting OBS dependencies..."
          mkdir -p obs-deps
          tar -xJf obs-deps.tar.gz -C obs-deps
          if [ $? -ne 0 ]; then
            echo "Error: Failed to extract OBS dependencies"
            exit 1
          fi
          
          # Verify extraction
          if [ ! -d "obs-deps/lib" ]; then
            echo "Error: OBS dependencies not extracted correctly"
            ls -la obs-deps
            exit 1
          fi
          
          # Clone OBS Studio with specific version
          git clone --recursive https://github.com/obsproject/obs-studio.git
          cd obs-studio
          git checkout 29.1.3  # Use a version compatible with Xcode 15.4
          git submodule update --init --recursive
          
          # Create build directory and configure
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DENABLE_BROWSER=OFF \
                -DENABLE_WEBSOCKET=OFF \
                -DENABLE_PLUGINS=OFF \
                -DENABLE_UI=OFF \
                -DENABLE_SCRIPTING=OFF \
                -DQTDIR=/opt/homebrew/opt/qt@6 \
                -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/obs-deps" \
                -G Xcode \
                ..
          
          # Build and install
          xcodebuild -configuration RelWithDebInfo
          sudo xcodebuild -configuration RelWithDebInfo install
          
          # Set environment variables
          echo "LIBOBS_PATH=/usr/local/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/homebrew/opt/qt@6/lib/pkgconfig:$GITHUB_WORKSPACE/obs-deps/lib/pkgconfig" >> $GITHUB_ENV
          
          # Verify installation
          echo "Checking installed OBS packages:"
          find /usr/local/lib -name "libobs*"
          
          # Find and verify libobs.pc location
          echo "Searching for libobs.pc..."
          find /usr/local/lib -name "libobs.pc" -type f
          
          # Verify pkg-config can find libobs
          echo "Testing pkg-config:"
          pkg-config --libs --cflags libobs
          
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Build
        run: |
          if [[ "${{ needs.check-event.outputs.config }}" == "release" ]]; then
            PKG_CONFIG_PATH=${{ env.PKG_CONFIG_PATH }} \
            LIBOBS_PATH=${{ env.LIBOBS_PATH }} \
            cargo build --release --target ${{ matrix.target }}
          else
            PKG_CONFIG_PATH=${{ env.PKG_CONFIG_PATH }} \
            LIBOBS_PATH=${{ env.LIBOBS_PATH }} \
            cargo build --target ${{ matrix.target }}
          fi
          
      - name: Debug Build Output
        run: |
          echo "Build configuration: ${{ needs.check-event.outputs.config }}"
          echo "Target directory contents:"
          ls -la target/${{ matrix.target }}/${{ needs.check-event.outputs.config }}
          if [[ "${{ matrix.target }}" == *"-apple-"* ]]; then
            echo "Expected library name: libtarkov_price_overlay.dylib"
          else
            echo "Expected library name: libtarkov_price_overlay.so"
          fi
          
      - name: Run Tests
        run: |
          if [[ "${{ needs.check-event.outputs.config }}" == "release" ]]; then
            cargo test --release --target ${{ matrix.target }}
          else
            cargo test --target ${{ matrix.target }}
          fi
          
      - name: Package
        if: ${{ fromJSON(needs.check-event.outputs.package) }}
        run: |
          mkdir -p dist
          echo "Creating package for ${{ matrix.target }}"
          if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
            tar -czvf dist/${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}.tar.gz \
              -C target/${{ matrix.target }}/${{ needs.check-event.outputs.config }} libtarkov_price_overlay.so
          elif [[ "${{ matrix.target }}" == *"-apple-"* ]]; then
            tar -czvf dist/${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}.tar.gz \
              -C target/${{ matrix.target }}/${{ needs.check-event.outputs.config }} libtarkov_price_overlay.dylib
          fi
          
      - name: Upload Artifacts 📡
        uses: actions/upload-artifact@v4
        if: ${{ fromJSON(needs.check-event.outputs.package) }}
        with:
          name: ${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}-${{ needs.check-event.outputs.commitHash }}
          path: dist/${{ needs.check-event.outputs.pluginName }}-${{ needs.check-event.outputs.pluginVersion }}-${{ matrix.target }}.tar.gz 